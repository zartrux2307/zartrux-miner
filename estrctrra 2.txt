zartrux-miner/1
├── CMakeLists.txt                      # Archivo raíz de compilación del proyecto
├── LICENSE                             # Licencia de uso
├── README.md                           # Documentación principal del sistema

├── src/                                # Código fuente principal (C++)
│   ├── zarmain.cpp                     # Punto de entrada del minero (main C++)
│   ├── core/
│   │   ├── MinerCore.cpp/.h            # Núcleo de control de minería  ok✅ 
│   │   ├── JobManager.cpp/.h           # Gestión de trabajos y distribución de nonces ok✅ 
│   │   ├── PoolDispatcher.cpp/.h       # Gestión y asignación de pools de minería ok✅ 
│   │   ├── NonceValidator.cpp/.h       # Validación de nonces y filtrado  ok✅
│   │   ├── MiningModeManager.cpp/.h    # Gestión del modo (solo, pool, híbrido y ia)ok✅
│   │   ├── hash.cpp/.h                 # Funciones de hashing ok✅
            SmartCache.cpp/.h          # fundamental para el rendimiento del sistema minero, especialmente en entornos con alta carga de trabajo y múltiples hilos de ejecución ok✅ 
│   │   ├── threads/
│   │   │   ├── WorkerThread.cpp/.h     # Ejecución paralela de minería por hilo ok✅
│   │   ├── ia/
│   │   │   ├── IAReceiver.cpp/.h       # Recepción de nonces desde IA (ZMQ/Socket)ok✅
│   │   └── CMakeLists.txt
│   ├── utils/
│   │   ├── Logger.cpp/.h               # Sistema de logging para consola y archivo ok✅
│   │   ├── nonce_logger_adapter.cpp/.h # Adaptador de logs para nonces exitosos ok✅
│   │   ├── export_successful_nonces.py # Exportación de nonces validados a CSV ok✅
│   │   ├── nonce_logger.py             # Logger de hashes/éxitos IA ok✅
│   │   ├── NodeInfo.h                  # Info de nodo local para conectividad ok✅
│   │   ├── config_manager.cpp/.h       # Gestión de configuración JSON ok✅
│   │   ├── StatusExporter.cpp/.h       # Exporta estado del sistema a archivo JSON ok✅
│   │   └── CMakeLists.txt ok✅
│   ├── randomxzar/ 
│   │   └── src/                         # Librería oficial RandomX integrada
│   │       └── randomx/...             # Código original RandomX
│
│   ├── network/
│   │   ├── StratumClient.cpp/.h        # Conexión y autenticación a pools Stratum ok✅
│   │   ├── PoolFailover.cpp/.h         # Mecanismo de failover a pools secundarios ok✅
│   │   └── CMakeLists.txt ok✅
│
│   ├── memory/
│   │   ├── LegacyAllocator.cpp/.h      # Asignación de memoria para legacy systemsok✅
│   │   ├── SmartCache.cpp/.h           # Cacheo inteligente para RandomX y buffersok✅
│   │   └── CMakeLists.txt
│
│   ├── runtime/
│   │   ├── Profiler.cpp/.h             # Medición de rendimiento ok✅
│   │   ├── AdaptiveScheduler.cpp/.h    # Ajuste dinámico de la carga del sistema ok✅
│   │   ├── PowerSafe.cpp/.h            # Optimización de consumo energético ok✅
│   │   ├── SystemMonitor.cpp/.h        # Monitor del sistema en tiempo real ok✅
│   │   └── CMakeLists.txt
├── zarbackend/
│   ├── server.py                       # Servidor web Flask ok✅
│   ├── zartrux_status.json             # Estado actual exportado por el minero ok✅
│   ├── templates/
│   │   └── index.html  # Interfaz web ok✅
             logo.zar png   ok✅              
│   └── static/
│       ├── css/styles.css              # Estilo visual ok✅
│       └── js/main.js                  # Scripts JS diná ok✅

│
│   ├── metrics/
│   │   ├── PrometheusExporter.cpp/.h   # Exportador de métricas para Prometheus ok✅ 
│   │   ├── prometheus_labels.yaml      # Definición de etiquetas para métricas ok✅ 
│   │   └── CMakeLists.txt ok✅ 

│   ├── arch/
│   │   └── x8ag/                        # Optimizaciones por arquitectura CPU
│   │       ├── kernel_x86_sse2.cpp/.h ok✅
│   │       ├── kernel_x86_avx.cpp/.h ok✅
│   │       ├── kernel_x86_avx512.cpp/.h ok✅
│   │       ├── kernel_x86_generic.cpp/.h ok✅
│   │   └── CMakeLists.txt ok✅ 

│   ├── patches/
│   │   ├── randomx_patch.asm           # Parche ASM para acelerar operaciones ok✅ 
│   │   └── CMakeLists.txt ok✅ 

│   └── CMakeLists.txt                  # Compilación local para `src/`

├── ia-modules/                         # Inteligencia Artificial para minería
│   ├── CMakeLists.txt
│   ├── launcher/
│   │   └── zartrux_launcher.py         # Lanza el sistema  IA
│
│   ├── bridge/                         # Conexión y adaptadores IA ↔ minería
│   │   ├── inject_nonces_from_ia.py    # Inserta nonces IA al minero
│   │   ├── ethical_nonce_adapter.py    # Selección  de nonces
│   │   ├── predict_nonce_server.py     # Servidor HTTP para distribuir nonces
│   │   ├── predict_nonce_success.py    # Predice la probabilidad de éxito
│   │   ├── predict_nonce_inference.py  # Inferencia de nonces con modelos
│   │   ├── test_inference.py           # Pruebas de inferencia
│
│   ├── training/                       # Entrenamiento IA
│   │   ├── train_model.py              # Entrenamiento base
│   │   ├── advanced_hash_classifier.py # Clasificador hash IA
│   │   ├── AutoTrainer.py              # Entrenamiento automático
│   │   └── RegressionModel.py          # Modelo de regresión
│
│   ├── analytics/                      # Análisis de datos mineros
│   │   ├── TimeSeriesAnalyzer.py       # Media móvil, tendencias
│   │   ├── FourierAnalyzer.py          # Frecuencias y espectros
│   │   ├── ClusterAnalyzer.py          # Agrupación de nonces
│   │   ├── NoncePatternAnalyzer.py     # Patrones en generación de nonces
│   │   ├── HashRatePredictor.py        # Predicción de tasa de hash
│   │   ├── lmdb_nonce_extractor.py     # Extracción LMDB de nonces
            zar.py                      # Análisis de datos
│
│   ├── evaluation/                     # Evaluación estadística avanzada
│   │   ├── DistributionAnalyzer.py     # Curtosis y asimetría
│   │   ├── SurvivalAnalyzer.py         # Análisis de supervivencia
│   │   ├── nonce_stats.py              # Estadísticas básicas (CV, percentiles)
│   │   ├── entropy_analysis.py         # Entropía de Renyi y Tsallis
│   │   ├── correlation_analysis.py     # Correlograma/autocorrelación
│   │   ├── pca_nonce_classifier.py     # Reducción de dimensionalidad (PCA)
│   │   ├── kl_divergence.py            # Divergencia de Kullback-Leibler
│   │   └── lorenz_entropy.py           # Simulación caótica de Lorenz
│
│   ├── logs/
│   │   ├── nonces_exitosos.txt         # Nonces válidos en minería
│   │   ├── nonces_hash.csv             # Hashes generados + puntuación
│   │   └── inyectados.log              # Registro de nonces IA inyectados

│   ├── data/
│   │   └── nonce_training_data.csv     # Dataset de entrenamiento

│   ├── models/
│   │   ├── ethical_nonce_model.joblib  # IA para selección óptima
│   │   ├── hash_classifier_model.joblib# Clasificador IA
│   │   └── cluster_model.joblib        # Clustering de nonces

│   ├── utils/
│   │   ├── FeatureEngineer.py          # Ingeniería de características temporales
│   │   ├── nonce_loader.py             # Carga eficiente de logs y nonces
│   │   ├── data_preprocessing.py       # Limpieza y preparación de datos
│   │   └── config_manager.py           # Manejo de configuración para IA

├── config/
│   ├── miner_config.json               # Configuración principal del minero
│   ├── ia_config.json                  # Configuración para IA
│   ├── config_manager.json             # Configuración global
│   └── logging_config.json.in          # Configuración de logs

├── security/
│   ├── AESNonceEncryptor.cpp/.h        # Encriptación AES de nonces
│   ├── ConfigSigner.cpp/.h             # Firmado digital de configuración
│   └── CMakeLists.txt

├── tests/
│   ├── unit/MinerCore_test.cpp         # Pruebas unitarias
│   ├── integration/StratumClient_test.cpp # Pruebas de integración
│   ├── performance/RandomX_benchmark.cpp # Benchmarks
│   └── CMakeLists.txt

├── scripts/
│   ├── build.sh                        # Compilación automática
│   ├── install_deps.sh                 # Instalación de dependencias
│   └── run_miner.sh                    # Ejecuta el minero

├── .github/workflows/
│   ├── build.yml                       # CI: compilación automática
│   └── test.yml                        # CI: pruebas automáticas

├── docs/
│   ├── API_INTERNAL.md                 # Documentación interna de APIs
│   ├── IA_MODULES.md                   # Detalles sobre módulos IA
│   └── ARCHITECTURE.md                 # Arquitectura del sistema
