zartrux-miner/
├── CMakeLists.txt                      # Archivo raíz de compilación del proyecto
├── LICENSE                             # Licencia de uso
├── README.md                           # Documentación principal del sistema

├── src/                                # Código fuente principal (C++)
   src/CMakeLists.txt                  # Compilación local para `src/`
│  src/zarmain.cpp                     # Punto de entrada del minero (main C++)
│   ├── src/core/
│   │   ├── MinerCore.cpp/.h            # Núcleo de control de minería  ok✅ 
│   │   ├── JobManager.cpp/.h           # Gestión de trabajos y distribución de nonces ok✅ 
│   │   ├── PoolDispatcher.cpp/.h       # Gestión y asignación de pools de minería ok✅ 
│   │   ├── NonceValidator.cpp/.h       # Validación de nonces y filtrado  ok✅
│   │   ├── MiningModeManager.cpp/.h    # Gestión del modo (solo, pool, híbrido y ia)ok✅
│   │   ├── hash.cpp/.h                 # Funciones de hashing ok✅
            SmartCache.cpp/.h           # fundamental para el rendimiento del sistema minero, especialmente en en
        src/core/threads/
│   │   │   ├── WorkerThread.cpp/.h     # Ejecución paralela de minería por hilo ok✅
│   │   src/core/ia/
│   │   │   ├── IAReceiver.cpp/.h       # Recepción de nonces desde IA (ZMQ/Socket)ok✅

│   ├ src/utils/
│   │   ├── Logger.cpp/.h               # Sistema de logging para consola y archivo ok✅
│   │   ├── nonce_logger_adapter.cpp/.h # Adaptador de logs para nonces exitosos ok✅
│   │   ├── export_successful_nonces.py # Exportación de nonces validados a CSV ok✅
│   │   ├── nonce_logger.py             # Logger de hashes/éxitos IA ok✅
│   │   ├── NodeInfo.h                  # Info de nodo local para conectividad ok✅
│   │   ├── config_manager.cpp/.h       # Gestión de configuración JSON ok✅
│   │   ├── StatusExporter.cpp/.h       # Exporta estado del sistema a archivo JSON ok✅
│   │   └──Chrono.cpp/.h
│   │    

           src/crypto/

           src/crypto/argon2/
                      src/crypto/argon2/include/
                                            argon2.h
                      src/crypto/argon2/lib/
                                        argon2-template-64.h
                                        core.c
                                        core.h
                                        encoding.c
                                        encoding.h
                                        genkat.c
                                        genkat.h
                                        impl-select.c
                                        impl-select.h
                       src/crypto/argon2/lib/blake2/
                                              blake2-impl.h
                                              blake2.c
                                              blake2.h
           src/crypto/randomx/
                             aes_hash.hpp
                             allocator.cpp
                             allocator.hpp
                             blake2_generator.cpp
                             blake2_generator.hpp
                             bytecode_machine.cpp
                             bytecode_machine.hpp
                             common.hpp
                             configuration.h
                             dataset.cpp
                             dataset.hpp
                             instruction.hpp
                             instructions_portable.cpp
                             intrin_portable.h
                             jit_compiler.hpp
                             jit_compiler_a64.cpp
                             jit_compiler_a64.hpp
                             jit_compiler_a64_static.hpp
                             jit_compiler_a64_static.S
                             jit_compiler_fallback.cpp
                             jit_compiler_fallback.hpp
                             jit_compiler_x86.cpp
                             jit_compiler_x86.hpp
                             jit_compiler_x86_static.asm
                             jit_compiler_x86_static.hpp
                             jit_compiler_x86_static.S
                             program.hpp
                             randomx.cpp
                             randomx.h
                             reciprocal.c
                             reciprocal.h
                             soft_aes.cpp
                             soft_aes.h
                             superscalar.cpp
                             superscalar.hpp
                             superscalar_program.hpp
                             virtual_machine.cpp
                             virtual_machine.hpp
                             virtual_memory.cpp
                             virtual_memory.hpp
                             vm_compiled.cpp
                             vm_compiled.hpp
                             vm_compiled_light.cpp
                             vm_compiled_light.hpp
                             vm_interpreted.cpp
                             vm_interpreted.hpp
                             vm_interpreted_light.cpp
                              vm_interpreted_light.hpp
   src/crypto/randomx/blake2/
                           blake2-impl.h
                           blake2.h
                           blake2b-round.h
                           blake2b.c
                           blake2b_sse41.c
                           blamka-round-ref.h
                           endian.h
    src/crypto/randomx/blake2/avx2/
                             blake2.h
                             blake2b-common.h
                             blake2b-load-avx2.h
                             blake2b.h
                             blake2b_avx2.c

     
│
│   ├── src/network/
│   │   ├── StratumClient.cpp/.h        # Conexión y autenticación a pools Stratum ok✅
│   │   ├── PoolFailover.cpp/.h         # Mecanismo de failover a pools secundarios ok✅
│   │   └── CMakeLists.txt ok✅
│
│   ├── src/memory/
│   │   ├── LegacyAllocator.cpp/.h      # Asignación de memoria para legacy systemsok✅
│   │   ├── SmartCache.cpp/.h           # Cacheo inteligente para RandomX y buffersok✅
            VirtualMemory.cpp/.h
│   │   └── CMakeLists.txt
│
│   ├── src/runtime/
│   │   ├── Profiler.cpp/.h             # Medición de rendimiento ok✅
│   │   ├── AdaptiveScheduler.cpp/.h    # Ajuste dinámico de la carga del sistema ok✅
│   │   ├── PowerSafe.cpp/.h            # Optimización de consumo energético ok✅
│   │   ├── SystemMonitor.cpp/.h        # Monitor del sistema en tiempo real ok✅
│   │   └── CMakeLists.txt
├── src/zarbackend/
│   ├── server.py                       # Servidor web Flask ok✅
│   ├── zartrux_status.json             # Estado actual exportado por el minero ok✅
│  src/zarbackend/ templates/
│                          index.html  # Interfaz web ok✅
                            logo.zar png   ok✅              
│    src/zarbackend/static/
│      src/zarbackend/static/css/
                                 styles.css  # Estilo visual ok✅

│       src/zarbackend/static/js/
                                main.j # Scripts JS diná ok✅

          src/arch/
                  Cpu.h
                  Cpu.cpp
│   │   └── src/arch/x8ag/                        # Optimizaciones por arquitectura CPU
│   │       ├── kernel_x86_sse2.cpp/.h ok✅
│   │       ├── kernel_x86_avx.cpp/.h ok✅
│   │       ├── kernel_x86_avx512.cpp/.h ok✅
│   │       ├── kernel_x86_generic.cpp/.h ok✅
│   │   

│   ├── src/patches/
│   │ 
           program_epilogue_linux.inc
           program_epilogue_store.inc
           program_epilogue_win64.inc
           program_imul_rcp_store.inc
           program_loop_load.inc
           program_loop_load_xop.inc
           program_loop_store.inc
           program_prologue_linux.inc
           program_prologue_win64.inc
           program_read_dataset.inc
           program_read_dataset_sshash_fin.inc
           program_read_dataset_sshash_init.inc
           program_sshash_avx2_constants.inc
           program_sshash_avx2_epilogue.inc
           program_sshash_avx2_loop_begin.inc
           program_sshash_avx2_loop_end.inc
           program_sshash_avx2_save_registers.inc
           program_sshash_avx2_ssh_load.inc
           program_sshash_avx2_ssh_prefetch.inc
           program_sshash_constants.inc
           program_sshash_load.inc
           program_sshash_prefetch.inc
           program_xmm_constants.inc
           randomx_patch_masm.asm
           randomx_patch_nasm.asm
           randomx_reciprocal.inc

├── src/ia-modules/                         # Inteligencia Artificial para minería

│ src/ia-modules/ launcher/
│   │   └──-------------------- zartrux_launcher.py         # Lanza el sistema  IA
│
│   ├──src/ ia-modules/bridge/                         # Conexión y adaptadores IA ↔ minería
│   │   ├── inject_nonces_from_ia.py    # Inserta nonces IA al minero
│   │   ├── ethical_nonce_adapter.py    # Selección  de nonces
│   │   ├── predict_nonce_server.py     # Servidor HTTP para distribuir nonces
│   │   ├── predict_nonce_success.py    # Predice la probabilidad de éxito
│   │   ├── predict_nonce_inference.py  # Inferencia de nonces con modelos
│   │   ├── test_inference.py           # Pruebas de inferencia
│
│   ├──src/ ia-modules/ training/                       # Entrenamiento IA
│   │   ├── train_model.py              # Entrenamiento base
│   │   ├── advanced_hash_classifier.py # Clasificador hash IA
│   │   ├── AutoTrainer.py              # Entrenamiento automático
│   │   └── RegressionModel.py          # Modelo de regresión
│
│   ├── src/ia-modules/analytics/                      # Análisis de datos mineros
│   │   ├── TimeSeriesAnalyzer.py       # Media móvil, tendencias
│   │   ├── FourierAnalyzer.py          # Frecuencias y espectros
│   │   ├── ClusterAnalyzer.py          # Agrupación de nonces
│   │   ├── NoncePatternAnalyzer.py     # Patrones en generación de nonces
│   │   ├── HashRatePredictor.py        # Predicción de tasa de hash
│   │   ├── lmdb_nonce_extractor.py     # Extracción LMDB de nonces
            zar.py                      # Análisis de datos
│
│   ├──src/ ia-modules/evaluation/                     # Evaluación estadística avanzada
│   │   ├── DistributionAnalyzer.py     # Curtosis y asimetría
│   │   ├── SurvivalAnalyzer.py         # Análisis de supervivencia
│   │   ├── nonce_stats.py              # Estadísticas básicas (CV, percentiles)
│   │   ├── entropy_analysis.py         # Entropía de Renyi y Tsallis
│   │   ├── correlation_analysis.py     # Correlograma/autocorrelación
│   │   ├── pca_nonce_classifier.py     # Reducción de dimensionalidad (PCA)
│   │   ├── kl_divergence.py            # Divergencia de Kullback-Leibler
│   │   └── lorenz_entropy.py           # Simulación caótica de Lorenz
│
│   ├──src/ ia-modules/logs/
│   │   ├── nonces_exitosos.txt         # Nonces válidos en minería
│   │   ├── nonces_hash.csv             # Hashes generados + puntuación
│   │   └── inyectados.log              # Registro de nonces IA inyectados

│   ├── src/ia-modules/data/
│   │   └── nonce_training_data.csv     # Dataset de entrenamiento

│   ├── src/ia-modules/ models/
│   │   ├── ethical_nonce_model.joblib  # IA para selección óptima
│   │   ├── hash_classifier_model.joblib# Clasificador IA
│   │   └── cluster_model.joblib        # Clustering de nonces

│   ├── src/ia-modules/utils/
│   │   ├── FeatureEngineer.py          # Ingeniería de características temporales
│   │   ├── nonce_loader.py             # Carga eficiente de logs y nonces
│   │   ├── data_preprocessing.py       # Limpieza y preparación de datos
│   │   └── config_manager.py           # Manejo de configuración para IA

├── src/config/
│   ├── miner_config.json               # Configuración principal del minero
│   ├── ia_config.json                  # Configuración para IA
│   ├── config_manager.json             # Configuración global
│   └── logging_config.json.in          # Configuración de logs

├── src/security/
│   ├── AESNonceEncryptor.cpp/.h        # Encriptación AES de nonces
│   ├── ConfigSigner.cpp/.h             # Firmado digital de configuración
│  

├── tests/
│   ├── unit/MinerCore_test.cpp         # Pruebas unitarias
│   ├── integration/StratumClient_test.cpp # Pruebas de integración
│   ├── performance/RandomX_benchmark.cpp # Benchmarks


├── scripts/
│   ├── build.sh                        # Compilación automática
│   ├── install_deps.sh                 # Instalación de dependencias
│   └── run_miner.sh                    # Ejecuta el minero

├── .github/workflows/
│   ├── build.yml                       # CI: compilación automática
│   └── test.yml                        # CI: pruebas automáticas

├── docs/
│   ├── API_INTERNAL.md                 # Documentación interna de APIs
│   ├── IA_MODULES.md                   # Detalles sobre módulos IA
│   └── ARCHITECTURE.md                 # Arquitectura del sistema
